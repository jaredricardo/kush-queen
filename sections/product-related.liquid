<div class="page-width-2"> 
{%- if section.settings.show_product_recommendations -%}
  <div class="product-recommendations" data-product-id="{{ product.id }}" data-limit="4">
    <div class="product-recommendations__inner related-products-section sec-space-both">
      {%- if recommendations.products_count > 0 -%}
        {%- if section.settings.heading != blank -%}
          <div class="sec-heading text-center">
            <h2>{{section.settings.heading}}</h2>
          </div>
        {%- endif -%}
        <ul class="grid grid--uniform grid--view-items">
          {%- for product in recommendations.products -%}


{% comment %} Wholesale_Club_Product_Prices Start {% endcomment %}
{% assign base_product = product %}
{% assign base_variant = product.selected_or_first_available_variant %}

{% if shop.metafields.sawholesale['base_price'] == blank %}
  {% assign base_price = 'compare_at_price' %}
{% else %}
  {% assign base_price = shop.metafields.sawholesale['base_price'] %}
{% endif %}

{% assign saw_discount = 0 %}{% assign saw_has_discount = false %}

{% if customer.tags != blank %}
  {% for mf in base_product.metafields.sawholesale %}
{%- comment -%} Wholesale_Club_Product_Visibility_For_Loop Start {%- endcomment -%}
{%- capture hide_resource -%}{% render "wc_product_visibility", resource: mf %}{%- endcapture -%}
{%- if hide_resource == "true" -%}
  {% continue %}
{%- endif -%}
{%- comment -%} Wholesale_Club_Product_Visibility_For_Loop End {%- endcomment -%}

    {% capture product_customer_tag %}{{ mf | first | replace: 'discount_', '' }}{% endcapture %}
    {% if customer.tags contains product_customer_tag %}
      {% assign saw_has_discount = true %}
      {% assign discount_key = product_customer_tag | prepend: 'discount_' %}
      {% assign price_key = product_customer_tag | prepend: 'price_' %}
      {% assign saw_discount = base_product.metafields.sawholesale[discount_key] | divided_by: 100.0 %}
    {% endif %}
  {% endfor %}
{% endif %}

{% assign saw_discount = 1 | minus: saw_discount %}

{% if base_price == 'price' or base_variant.compare_at_price == blank  or base_variant.compare_at_price == 0 or base_variant.compare_at_price < base_variant.price %}
  {% assign saw_variant_compare_at_price = base_variant.price %}
{% else %}
  {% assign saw_variant_compare_at_price = base_variant.compare_at_price %}
{% endif %}

{% assign cpe = shop.metafields.sawholesale['cpe'] | default: "true" %}
{% if base_variant.metafields.sawholesale[price_key] != blank and cpe == "true" %}
  {% assign saw_variant_price = base_variant.metafields.sawholesale[price_key] %}
{% else %}
  {% assign saw_variant_price = saw_variant_compare_at_price | times: saw_discount %}
{% endif %}

{% if saw_has_discount == false or saw_variant_price >= saw_variant_compare_at_price %}
  {% assign WCProduct_Price = base_product.price %}
  {% assign WCProduct_ComparePrice = base_product.compare_at_price %}
  {% assign WCProduct_PriceMin = base_product.price_min %}
  {% assign WCProduct_ComparePriceMin = base_product.compare_at_price_min %}
  {% assign WCProduct_PriceMax = base_product.price_max %}
  {% assign WCProduct_ComparePriceMax = base_product.compare_at_price_max %}
  {% assign WCProduct_VariantPrice = base_variant.price %}
  {% assign WCProduct_VariantComparePrice = base_variant.compare_at_price %}
{% else %}   
  {% assign WCProduct_Price = saw_variant_price %}
  {% assign WCProduct_PriceMin = base_product.price_min | times: saw_discount %}
  {% assign WCProduct_PriceMax = base_product.price_max | times: saw_discount %}
  {% assign WCProduct_ComparePrice = saw_variant_compare_at_price %}
  {% if base_product.compare_at_price_min != 0 %}{% assign WCProduct_ComparePriceMin = base_product.compare_at_price_min %}{% else %}{% assign WCProduct_ComparePriceMin = base_product.price_min %}{% endif %}
  {% if base_product.compare_at_price_max != 0 %}{% assign WCProduct_ComparePriceMax = base_product.compare_at_price_max %}{% else %}{% assign WCProduct_ComparePriceMax = base_product.price_max %}{% endif %}
  {% assign WCProduct_VariantPrice = saw_variant_price %}
  {% assign WCProduct_VariantComparePrice = saw_variant_compare_at_price %}
{% endif %}
{% comment %} Wholesale_Club_Product_Prices End {% endcomment %}

          <li class="grid__item small--one-half medium-up--one-quarter">
            {% include 'new-product-card-grid', max_height: 250 %}
          </li>
          {%- endfor -%}
        </ul>
      {%- endif -%}
    </div>
  </div>
{%- endif -%}
</div>
{% schema %}
{
  "name": "Product recommendations",
  "settings": [
    {
      "type": "checkbox",
      "id": "show_product_recommendations",
      "label": "Enable product recommendations",
      "default": true
    },
	{
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Related Products"
    }
	
  ]
}
{% endschema %}


{% javascript %}
var loadProductRecommendationsIntoSection = function() {
  // Look for an element with class 'product-recommendations'
    var productRecommendationsSection = document.querySelector(".product-recommendations");
  
    if (productRecommendationsSection === null) { return; }
    // Read product id from data attribute
    var productId = productRecommendationsSection.dataset.productId;
    // Read limit from data attribute
    var limit = productRecommendationsSection.dataset.limit;
    // Build request URL
    var requestUrl = "/recommendations/products?section_id=product-recommendations&limit="+limit+"&product_id="+productId;
    // Create request and submit it using Ajax
    var request = new XMLHttpRequest();
    request.open("GET", requestUrl);
    request.onload = function() {
      if (request.status >= 200 && request.status < 300) {
        var container = document.createElement("div");
        var subContainer = document.createElement("div");
        container.innerHTML = request.response;
        productRecommendationsSection.parentElement.innerHTML = container.querySelector(".product-recommendations__inner").innerHTML;
      }
    };
    request.send();
  };
  // If your section has theme settings, the theme editor
  // reloads the section as you edit those settings. When that happens, the
  // recommendations need to be fetched again.
  // See https://help.shopify.com/en/themes/development/sections/integration-with-theme-editor
  document.addEventListener("shopify:section:load", function(event) {
    if (event.detail.sectionId === "product-recommendations") {
      loadProductRecommendationsIntoSection();
    }
  });
  // Fetching the recommendations on page load
  loadProductRecommendationsIntoSection();
{% endjavascript %}
